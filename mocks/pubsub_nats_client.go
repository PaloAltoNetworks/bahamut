// Code generated by MockGen. DO NOT EDIT.
// Source: go.aporeto.io/bahamut (interfaces: NATSClient)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	go_nats "github.com/nats-io/go-nats"
	reflect "reflect"
)

// MockNATSClient is a mock of NATSClient interface
type MockNATSClient struct {
	ctrl     *gomock.Controller
	recorder *MockNATSClientMockRecorder
}

// MockNATSClientMockRecorder is the mock recorder for MockNATSClient
type MockNATSClientMockRecorder struct {
	mock *MockNATSClient
}

// NewMockNATSClient creates a new mock instance
func NewMockNATSClient(ctrl *gomock.Controller) *MockNATSClient {
	mock := &MockNATSClient{ctrl: ctrl}
	mock.recorder = &MockNATSClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockNATSClient) EXPECT() *MockNATSClientMockRecorder {
	return m.recorder
}

// Close mocks base method
func (m *MockNATSClient) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close
func (mr *MockNATSClientMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockNATSClient)(nil).Close))
}

// Flush mocks base method
func (m *MockNATSClient) Flush() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Flush")
	ret0, _ := ret[0].(error)
	return ret0
}

// Flush indicates an expected call of Flush
func (mr *MockNATSClientMockRecorder) Flush() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Flush", reflect.TypeOf((*MockNATSClient)(nil).Flush))
}

// IsConnected mocks base method
func (m *MockNATSClient) IsConnected() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsConnected")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsConnected indicates an expected call of IsConnected
func (mr *MockNATSClientMockRecorder) IsConnected() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsConnected", reflect.TypeOf((*MockNATSClient)(nil).IsConnected))
}

// IsReconnecting mocks base method
func (m *MockNATSClient) IsReconnecting() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsReconnecting")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsReconnecting indicates an expected call of IsReconnecting
func (mr *MockNATSClientMockRecorder) IsReconnecting() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsReconnecting", reflect.TypeOf((*MockNATSClient)(nil).IsReconnecting))
}

// Publish mocks base method
func (m *MockNATSClient) Publish(arg0 string, arg1 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Publish", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Publish indicates an expected call of Publish
func (mr *MockNATSClientMockRecorder) Publish(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockNATSClient)(nil).Publish), arg0, arg1)
}

// QueueSubscribe mocks base method
func (m *MockNATSClient) QueueSubscribe(arg0, arg1 string, arg2 go_nats.MsgHandler) (*go_nats.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueueSubscribe", arg0, arg1, arg2)
	ret0, _ := ret[0].(*go_nats.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueueSubscribe indicates an expected call of QueueSubscribe
func (mr *MockNATSClientMockRecorder) QueueSubscribe(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueueSubscribe", reflect.TypeOf((*MockNATSClient)(nil).QueueSubscribe), arg0, arg1, arg2)
}

// RequestWithContext mocks base method
func (m *MockNATSClient) RequestWithContext(arg0 context.Context, arg1 string, arg2 []byte) (*go_nats.Msg, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RequestWithContext", arg0, arg1, arg2)
	ret0, _ := ret[0].(*go_nats.Msg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RequestWithContext indicates an expected call of RequestWithContext
func (mr *MockNATSClientMockRecorder) RequestWithContext(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestWithContext", reflect.TypeOf((*MockNATSClient)(nil).RequestWithContext), arg0, arg1, arg2)
}

// Subscribe mocks base method
func (m *MockNATSClient) Subscribe(arg0 string, arg1 go_nats.MsgHandler) (*go_nats.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subscribe", arg0, arg1)
	ret0, _ := ret[0].(*go_nats.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Subscribe indicates an expected call of Subscribe
func (mr *MockNATSClientMockRecorder) Subscribe(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockNATSClient)(nil).Subscribe), arg0, arg1)
}
